// Code generated by MockGen. DO NOT EDIT.
// Source: avito-shop/internal/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	db "avito-shop/internal/db/sqlc"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pgtype "github.com/jackc/pgx/v5/pgtype"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateItem mocks base method.
func (m *MockStore) CreateItem(arg0 context.Context, arg1 db.CreateItemParams) (db.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItem", arg0, arg1)
	ret0, _ := ret[0].(db.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateItem indicates an expected call of CreateItem.
func (mr *MockStoreMockRecorder) CreateItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItem", reflect.TypeOf((*MockStore)(nil).CreateItem), arg0, arg1)
}

// CreatePurchase mocks base method.
func (m *MockStore) CreatePurchase(arg0 context.Context, arg1 db.CreatePurchaseParams) (db.Purchase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePurchase", arg0, arg1)
	ret0, _ := ret[0].(db.Purchase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePurchase indicates an expected call of CreatePurchase.
func (mr *MockStoreMockRecorder) CreatePurchase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePurchase", reflect.TypeOf((*MockStore)(nil).CreatePurchase), arg0, arg1)
}

// CreateTransfer mocks base method.
func (m *MockStore) CreateTransfer(arg0 context.Context, arg1 db.CreateTransferParams) (db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransfer", arg0, arg1)
	ret0, _ := ret[0].(db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransfer indicates an expected call of CreateTransfer.
func (mr *MockStoreMockRecorder) CreateTransfer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransfer", reflect.TypeOf((*MockStore)(nil).CreateTransfer), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// GetCurrentBalance mocks base method.
func (m *MockStore) GetCurrentBalance(arg0 context.Context, arg1 int32) (pgtype.Int4, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentBalance", arg0, arg1)
	ret0, _ := ret[0].(pgtype.Int4)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentBalance indicates an expected call of GetCurrentBalance.
func (mr *MockStoreMockRecorder) GetCurrentBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentBalance", reflect.TypeOf((*MockStore)(nil).GetCurrentBalance), arg0, arg1)
}

// GetItemByID mocks base method.
func (m *MockStore) GetItemByID(arg0 context.Context, arg1 int32) (db.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemByID", arg0, arg1)
	ret0, _ := ret[0].(db.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemByID indicates an expected call of GetItemByID.
func (mr *MockStoreMockRecorder) GetItemByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemByID", reflect.TypeOf((*MockStore)(nil).GetItemByID), arg0, arg1)
}

// GetItemByName mocks base method.
func (m *MockStore) GetItemByName(arg0 context.Context, arg1 string) (db.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemByName", arg0, arg1)
	ret0, _ := ret[0].(db.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemByName indicates an expected call of GetItemByName.
func (mr *MockStoreMockRecorder) GetItemByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemByName", reflect.TypeOf((*MockStore)(nil).GetItemByName), arg0, arg1)
}

// GetPurchases mocks base method.
func (m *MockStore) GetPurchases(arg0 context.Context, arg1 pgtype.Int4) ([]db.GetPurchasesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPurchases", arg0, arg1)
	ret0, _ := ret[0].([]db.GetPurchasesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPurchases indicates an expected call of GetPurchases.
func (mr *MockStoreMockRecorder) GetPurchases(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPurchases", reflect.TypeOf((*MockStore)(nil).GetPurchases), arg0, arg1)
}

// GetTransactions mocks base method.
func (m *MockStore) GetTransactions(arg0 context.Context, arg1 pgtype.Int4) ([]db.GetTransactionsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", arg0, arg1)
	ret0, _ := ret[0].([]db.GetTransactionsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MockStoreMockRecorder) GetTransactions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockStore)(nil).GetTransactions), arg0, arg1)
}

// GetUserByID mocks base method.
func (m *MockStore) GetUserByID(arg0 context.Context, arg1 int32) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockStoreMockRecorder) GetUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockStore)(nil).GetUserByID), arg0, arg1)
}

// GetUserByUsername mocks base method.
func (m *MockStore) GetUserByUsername(arg0 context.Context, arg1 string) (db.GetUserByUsernameRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(db.GetUserByUsernameRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockStoreMockRecorder) GetUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockStore)(nil).GetUserByUsername), arg0, arg1)
}

// PurchaseTx mocks base method.
func (m *MockStore) PurchaseTx(arg0 context.Context, arg1 db.PurchaseTxParams) (db.PurchaseTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurchaseTx", arg0, arg1)
	ret0, _ := ret[0].(db.PurchaseTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PurchaseTx indicates an expected call of PurchaseTx.
func (mr *MockStoreMockRecorder) PurchaseTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurchaseTx", reflect.TypeOf((*MockStore)(nil).PurchaseTx), arg0, arg1)
}

// TransferTx mocks base method.
func (m *MockStore) TransferTx(arg0 context.Context, arg1 db.TransferTxParams) (db.TransferTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferTx", arg0, arg1)
	ret0, _ := ret[0].(db.TransferTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferTx indicates an expected call of TransferTx.
func (mr *MockStoreMockRecorder) TransferTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferTx", reflect.TypeOf((*MockStore)(nil).TransferTx), arg0, arg1)
}

// UpdateBalanceForPurchase mocks base method.
func (m *MockStore) UpdateBalanceForPurchase(arg0 context.Context, arg1 db.UpdateBalanceForPurchaseParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalanceForPurchase", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalanceForPurchase indicates an expected call of UpdateBalanceForPurchase.
func (mr *MockStoreMockRecorder) UpdateBalanceForPurchase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalanceForPurchase", reflect.TypeOf((*MockStore)(nil).UpdateBalanceForPurchase), arg0, arg1)
}

// UpdateBalanceForTransfer mocks base method.
func (m *MockStore) UpdateBalanceForTransfer(arg0 context.Context, arg1 db.UpdateBalanceForTransferParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalanceForTransfer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalanceForTransfer indicates an expected call of UpdateBalanceForTransfer.
func (mr *MockStoreMockRecorder) UpdateBalanceForTransfer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalanceForTransfer", reflect.TypeOf((*MockStore)(nil).UpdateBalanceForTransfer), arg0, arg1)
}
